<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: jenkins | yasuoza diary]]></title>
  <link href="http://blog.yasuoza.com//categories/jenkins/atom.xml" rel="self"/>
  <link href="http://blog.yasuoza.com/"/>
  <updated>2014-06-09T13:27:40+00:00</updated>
  <id>http://blog.yasuoza.com/</id>
  <author>
    <name><![CDATA[Yasuharu Ozaki]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Jenkins's CSS returns 404 on OSX]]></title>
    <link href="http://blog.yasuoza.com/2014/01/17/jenkins-on-osx-via-homebrew/"/>
    <updated>2014-01-17T02:11:20+00:00</updated>
    <id>http://blog.yasuoza.com/2014/01/17/jenkins-on-osx-via-homebrew</id>
    <content type="html"><![CDATA[<h2>tl;dr</h2>

<p>Create tmp directory under <code>$JENKINS_HOME</code></p>

<p><code>bash
$ mkdir -p ~/.jenkins/tmpdir
</code></p>

<p>Then rewrite <code>homebrew.mxcl.jenkins.plist</code> like:</p>

<p>```xml
&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;UTF-8&rdquo;?>
&lt;!DOCTYPE plist PUBLIC &ldquo;&ndash;//Apple//DTD PLIST 1.0//EN&rdquo; &ldquo;<a href="http://www.apple.com/DTDs/PropertyList-1.0.dtd">http://www.apple.com/DTDs/PropertyList-1.0.dtd</a>&rdquo;>
<plist version="1.0"></p>

<pre><code>&lt;dict&gt;
    &lt;key&gt;Label&lt;/key&gt;
    &lt;string&gt;#{plist_name}&lt;/string&gt;
    &lt;key&gt;ProgramArguments&lt;/key&gt;
    &lt;array&gt;
        &lt;string&gt;/usr/bin/java&lt;/string&gt;
        &lt;string&gt;-Dmail.smtp.starttls.enable=true&lt;/string&gt;
        &lt;string&gt;-Dfile.encoding=UTF-8&lt;/string&gt;
        &lt;string&gt;-Djava.io.tmpdir=/Users/__USERNAME__/.jenkins/tmpdir&lt;/string&gt;
        &lt;string&gt;-jar&lt;/string&gt;
        &lt;string&gt;/usr/local/opt/jenkins/libexec/jenkins.war&lt;/string&gt;
        &lt;string&gt;--httpListenAddress=127.0.0.1&lt;/string&gt;
        &lt;string&gt;--httpPort=8080&lt;/string&gt;
    &lt;/array&gt;
    &lt;key&gt;RunAtLoad&lt;/key&gt;
    &lt;true/&gt;
&lt;/dict&gt;
</code></pre>

<p></plist>
```</p>

<p>As you can see, the point is to set <code>-Djava.io.tmpdir</code> to created tmp directory.</p>

<p>Restart jenkins</p>

<p><code>bash
$ launchctl unload ~/Library/LaunchAgents/homebrew.mxcl.jenkins.plist
$ launchctl load ~/Library/LaunchAgents/homebrew.mxcl.jenkins.plist
</code></p>

<h2>Description</h2>

<p>Sometimes, jenkins on OSX returns 404 status for its CSS. So its layout is broken.</p>

<p>The issue is reported at <a href="https://issues.jenkins-ci.org/browse/JENKINS-17526">JENKINS-17526</a> and there is a <a href="https://github.com/jenkinsci/jenkins/pull/1061">patch</a>
for the issue.</p>

<p>To solve the issue jenkins(installed via Homebrew) follow tl;dr section. It should work.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Trigger jenkins from Gitlab push hook]]></title>
    <link href="http://blog.yasuoza.com/2013/08/08/trigger-jenkins-from-gitlab-push-hook/"/>
    <updated>2013-08-08T09:10:00+00:00</updated>
    <id>http://blog.yasuoza.com/2013/08/08/trigger-jenkins-from-gitlab-push-hook</id>
    <content type="html"><![CDATA[<p>Jenkins is awesome secretary and my friend. I can&rsquo;t live without him.<br/>
My Jenkins does these things:</p>

<ul>
<li>Deploy blog.yasuoza.com</li>
<li>Test my private repositories</li>
<li>Cron jobs</li>
</ul>


<p>This blog and some private repositories are hosted by my <a href="http://gitlab.org/">Gitlab</a>.</p>

<p>Today I want to share how to build job via Gitlab push hook with concrete example: how to deploy <a href="http://octopress.org/">Octopress</a> blog with Giatlab.</p>

<p>First, you need to configure Octopress with rsync deployment. See more: <a href="http://octopress.org/docs/configuring/">Configuring Octopress</a></p>

<p>Next, set jenkins&rsquo;s public key to blog server so that jenkins can login the server without password.</p>

<p><code>plain
$ sudo -u jenkins -H ssh user@yourhost.com
</code></p>

<p>Then, install Jenkins plugin <a href="https://wiki.jenkins-ci.org/display/JENKINS/Gitlab+Hook+Plugin">Gitlab Hook Plugin</a> and set <code>http://your-jenkins-server/gitlab/build_now</code>
in your Gitlab like this:</p>

<p><img src="/images/jenkins_gitlab_hook_plugin.png"></p>

<p>This plugin works even if jenkins requires authentication to enter jenkins home.</p>

<p><strong> NOTE </strong><br/>
Gitlab Hook Plugin v0.2.11 does not work well when the job is not parameterized. So, use >= v0.2.12.<br/>
For more: <a href="https://github.com/elvanja/jenkins-gitlab-hook-plugin/issues/15">Build no longer triggering (Maybe running too bleeding edge?)</a></p>

<p>Finally, configure Jenkins job to deploy Octopress:</p>

<p><code>plain Execute shell
bundle
bundle exec rake generate
bundle exec rake deploy
</code></p>

<p><strong> NOTE </strong><br/>
OCTOPRESS REQUIRES RUBY 1.9.3-P194.<br/>
Ensure to jenkins&rsquo;s ruby version is 1.9.3-p194 or use ruby version management framework such as rvm or rbenv.<br/>
If you want to let jenkins run not only system ruby, I recomend you to use <a href="https://wiki.jenkins-ci.org/display/JENKINS/Rbenv+Plugin">rbenv plugin</a>.<br/>
It is easy to use.</p>

<p>Well, you done. Now push changes to your own Gitlab. Jenkins works for you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Trigger authenticated jenkins job]]></title>
    <link href="http://blog.yasuoza.com/2013/01/02/trigger-authenticated-jenkins-job/"/>
    <updated>2013-01-02T22:33:00+00:00</updated>
    <id>http://blog.yasuoza.com/2013/01/02/trigger-authenticated-jenkins-job</id>
    <content type="html"><![CDATA[<p>Trigger job in authenticated jenkins using ruby!</p>

<p>```ruby
require &lsquo;net/http&rsquo;</p>

<p>server = &lsquo;<a href="https://your.jenkins.com">https://your.jenkins.com</a>&rsquo;
jobname = &lsquo;your_jobname&rsquo;
build_token = &lsquo;job_build_token&rsquo;</p>

<p>user = &lsquo;you&rsquo;
user_token = &lsquo;your_token&rsquo;</p>

<p>uri = URI(&ldquo;#{server}/job/#{jobname}/build?token=#{build_token}&amp;cause=remote+trigger&rdquo;)</p>

<p>request = Net::<a href="HTTP::Get.new">HTTP::Get.new</a>(uri.request_uri)
request.basic_auth user, user_token</p>

<p>res = Net::HTTP.start(uri.hostname,</p>

<pre><code>                  uri.port,
                  use_ssl: uri.scheme == 'https') { |http|
</code></pre>

<p>  http.request(request)
}</p>

<p>p &ldquo;#{res.code}: #{res.msg}&rdquo;
```</p>

<p>If you use your &lsquo;own&rsquo; ssl certification, ignore <code>Certificate verify failed</code> with <code>OpenSSL::SSL::VERIFY_NONE</code> option like this</p>

<p>```ruby
res = Net::HTTP.start(uri.hostname,</p>

<pre><code>                  uri.port,
                  use_ssl: uri.scheme == 'https',
                  verify_mode: OpenSSL::SSL::VERIFY_NONE) { |http|
</code></pre>

<p>  http.request(request)
}
```</p>
]]></content>
  </entry>
  
</feed>
