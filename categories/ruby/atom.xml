<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | yasuoza diary]]></title>
  <link href="http://blog.yasuoza.com//categories/ruby/atom.xml" rel="self"/>
  <link href="http://blog.yasuoza.com/"/>
  <updated>2014-01-13T06:50:36+00:00</updated>
  <id>http://blog.yasuoza.com/</id>
  <author>
    <name><![CDATA[Yasuharu Ozaki]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Sprockets with Padrino without plugin]]></title>
    <link href="http://blog.yasuoza.com/2013/04/06/sprockets-with-padrino-without-plugin/"/>
    <updated>2013-04-06T18:24:00+00:00</updated>
    <id>http://blog.yasuoza.com/2013/04/06/sprockets-with-padrino-without-plugin</id>
    <content type="html"><![CDATA[<p>One day I was searching to integrate <code>sprockets</code> to my padrino application, I found following article to make it.
<a href="http://arthurchiu.com/posts/20130328-sprockets_bower_padrino">Sprockets &amp; Bower in my Padrino please.</a>
In the article he explained to integrate sprockets to padrino using <a href="https://github.com/petebrowne/sprockets-helpers">sprockets-helpers</a>, through rack.</p>

<p>I was so excited because the content is what I wanted to do. But few hours after, I realized the way he explained works good for <code>development</code> and <code>production</code> environment, but not for <code>test</code> environment since in <code>test</code> environment,
<code>/assets</code> is not mounted to padrino itself. So, testing with javascript like <code>data-confirm</code> testing will fail because javascript(and other assets too) is not loaded!</p>

<p>I began to search how to mount(or insert) sprockets middleware in padrino applicaiton again and found the following way to solve the issue.</p>

<p>The difference found way and previous article way is just how to insert sprockets middleware.
So, <code>Gemfile</code>, <code>config/sprockets.rb</code> and <code>Rakefile</code> are same.
<code>app/app.rb</code> differs little bit, and <code>lib/sprockets_initializer.rb</code> will be newly created.</p>

<p><code>lib/sprockets_initializer.rb</code> is used to register to use <a href="https://github.com/sstephenson/sprockets/blob/master/lib/sprockets/server.rb">Sprockets::Server</a> for assets request handler.</p>

<p>```ruby lib/sprockets_initializer.rb
module SprocketsInitializer
  def self.registered(app)</p>

<pre><code># Make it lazy
options[:asset_prefix] = -&gt; { Sprockets::Helpers.prefix }

app.use ::SprocketsInitializer::Rack, options
</code></pre>

<p>  end</p>

<p>  class Rack</p>

<pre><code>def initialize(app, options={})
  @app = app
  @asset_prefix = options[:asset_prefix].call
end

def call(env)
  if env['PATH_INFO'].match(@asset_prefix)
    env['PATH_INFO'].gsub!(@asset_prefix, '')
    return PadrinoSprocekts.environment.call(env)
  end

  @app.call(env)
end
</code></pre>

<p>  end
end
```</p>

<p>In <code>app/app.rb</code> register it only for not production environment because in production environment, I want to let application read assets from compiled assets path.</p>

<p>``` ruby app/app.rb
module Web
  class App &lt; Padrino::Application</p>

<pre><code>register Padrino::Rendering
register Padrino::Mailer
register Padrino::Helpers
register SprocketsInitializer unless Padrino.env == :production
helpers Sprockets::Helpers
</code></pre>

<p>  end
end
```</p>

<p>If you want, delete mounted sprockets from <code>config.ru</code></p>

<p>``` ruby config.ru
require File.expand_path(&ldquo;../config/boot.rb&rdquo;, <strong>FILE</strong>)</p>

<p>run Padrino.application
```</p>

<p>After changed configuration like above, you can test your application previous style.</p>

<p><code>plain
$ rake spec
</code></p>

<p>Thank you for reading!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[activemodel-attribute_changed_specification]]></title>
    <link href="http://blog.yasuoza.com/2012/12/19/activemodel-attribute-changed-specification-released/"/>
    <updated>2012-12-19T10:02:00+00:00</updated>
    <id>http://blog.yasuoza.com/2012/12/19/activemodel-attribute-changed-specification-released</id>
    <content type="html"><![CDATA[<p>On Dec 12, one feature suggestion posted to [Rails-core] ML.
The title was &ldquo;Active Record, changes from.. to..&rdquo;</p>

<p>His suggested feature was like following</p>

<p>```ruby
class Book &lt; ActiveRecord::Base
  STATUS_DELIVER = [0, 1]
  before_save :send_mail_to_customer</p>

<p>  def send_mail_to_customer
   UserMailer.send_mail_to_customer if self.status.changes(from: 0, to: 1)
  end
end
```</p>

<p>I knew this can be done in <a href="http://api.rubyonrails.org/classes/ActiveModel/Dirty.html">ActiveModel::Dirty</a>, but the feature <code>from</code> and <code>to</code> was interesting. So I implemented into gem named <a href="https://github.com/YasuOza/activemodel-attribute_changed_specification">activemodel-attribute_changed_specification</a>.</p>

<p>You can use this gem like this</p>

<p><code>ruby
user = User.new
user.name = 'Bob'
user.name_changed?(from: nil,  to: 'Bob') # =&gt; true
user.name_changed?(from: 'Paul',  to: 'Bob') # =&gt; false
</code></p>

<p>Though I overridden default <code>_changed?</code> method, I kept original <code>_changed?</code> method.</p>

<p><code>ruby
user = User.new
user.name = 'Bob'
user.name_changed? # =&gt; true
</code></p>

<p>This is my first gem. Yeah, it&rsquo;s fun!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blog update notificator]]></title>
    <link href="http://blog.yasuoza.com/2012/12/15/blog-update-notificator/"/>
    <updated>2012-12-15T16:22:00+00:00</updated>
    <id>http://blog.yasuoza.com/2012/12/15/blog-update-notificator</id>
    <content type="html"><![CDATA[<p>```ruby
require &lsquo;feed-normalizer&rsquo;
require &lsquo;twitter&rsquo;</p>

<p>option = Hash[[ARGV]]</p>

<p>url = option[&lsquo;&mdash;url&rsquo;]</p>

<p>class FeedTweeter
  def initialize(arg = {url: nil})</p>

<pre><code>@url = arg[:url]
</code></pre>

<p>  end</p>

<p>  def site_updated?</p>

<pre><code>@feed = FeedNormalizer::FeedNormalizer.parse open(@url)
@new_entry = @feed.entries.first

return true unless File.exist? "#{current_file_dirpath}/#{remember_text_file}"

last_tweeted_on = Time.parse(File.open(remember_text_file).read)
last_tweeted_on &lt; @new_entry.last_updated
</code></pre>

<p>  end</p>

<p>  def tweet!</p>

<pre><code>tweet_text = make_tweet_text
Twitter.update(tweet_text)

remember_last_tweeted_on!
</code></pre>

<p>  end</p>

<p>  private</p>

<pre><code>def current_file_dirpath
  "#{File.expand_path('../',  __FILE__)}"
end

def remember_text_file
  'last_tweeted_on.txt';
end

def make_tweet_text
  blog_title = @feed.title
  new_entry_title = @new_entry.title
  new_entry_url = @new_entry.url
  "#{new_entry_title} - #{blog_title} #{new_entry_url}"
end

def remember_last_tweeted_on!
  File.open("#{current_file_dirpath}/#{remember_text_file}", 'w') do |file|
    file.write(@new_entry.last_updated)
  end
end
</code></pre>

<p>end</p>

<p>Twitter.configure do |config|
  config.consumer_key = &lsquo;CONSUMER_KEY&rsquo;
  config.consumer_secret = &lsquo;CONSUMER_SECRET&rsquo;
  config.oauth_token = &lsquo;OAUTH_TOKEN&rsquo;
  config.oauth_token_secret = &lsquo;OAUTH_TOKEN_SECRET&rsquo;
end</p>

<p>feed_tweeter = FeedTweeter.new url: url
if feed_tweeter.site_updated?
  feed_tweeter.tweet!
end
```</p>

<p>This works with jenkins very well!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[No more rbenv rehash]]></title>
    <link href="http://blog.yasuoza.com/2012/12/06/no-more-rbenv-rehash/"/>
    <updated>2012-12-06T22:21:00+00:00</updated>
    <id>http://blog.yasuoza.com/2012/12/06/no-more-rbenv-rehash</id>
    <content type="html"><![CDATA[<p>I found nice gem named <a href="https://github.com/github/rbenv-autohash">rbenv-autohash</a></p>

<p>You do not need to type <code>rbenv rehash</code> anymore!</p>

<p>Yet you need to type <code>rbenv rehash</code> AFTER <code>gem install rbenv-autohash</code> :D</p>
]]></content>
  </entry>
  
</feed>
